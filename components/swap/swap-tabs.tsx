"use client";

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import usePrice from "@/hooks/usePrice";
import Big from "big.js";
import { useMemo, useState } from "react";
import CurrencyInput, { Currency } from "../currency-input";
import { Button } from "../ui/button";
import { Separator } from "../ui/separator";
import { SwapButton } from "./swap-button";
import { Card, CardFooter } from "../ui/card";

export const currencies: Currency[] = [
    {
        id: "usdc",
        name: "USD Coin",
        symbol: "USDC",
        address: "0x0000000000000000000000000000000000000000",
        icon: (
            <svg
                className="h-5 w-5 text-white"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
            >
                <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
            </svg>
        ),
    },
    {
        id: "supra",
        name: "Supra",
        address: "0x0000000000000000000000000000000000000000",
        symbol: "SUPRA",
        icon: (
            <svg
                width="40"
                height="40"
                viewBox="0 0 40 40"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    d="M39.627 20C39.627 31.044 30.755 40 19.814 40C8.872 40 0 31.044 0 20C0 8.956 8.872 0 19.814 0C30.755 0 39.627 8.956 39.627 20Z"
                    fill="#DD1438"
                />
                <path
                    d="M31.178 10.378C30.703 9.15601 29.906 8.08501 29.016 7.18701C28.0774 6.30403 26.9851 5.60043 25.793 5.11101C25.0213 4.79935 24.2115 4.59186 23.385 4.49401C20.43 4.06201 17.317 4.97801 15.059 7.26201C12.452 9.89401 11.536 13.747 12.686 17.334V17.369C11.9637 17.8242 11.3021 18.3692 10.717 18.991C9.81 19.951 9.075 21.067 8.599 22.289C8.13258 23.5151 7.89859 24.8173 7.909 26.129C7.909 27.462 8.186 28.729 8.705 29.907C9.181 31.129 9.978 32.2 10.867 33.098C11.8056 33.981 12.8979 34.6846 14.09 35.174C15.257 35.654 16.516 35.871 17.789 35.871C17.609 35.871 17.432 35.862 17.256 35.854C18.6278 35.9286 19.9999 35.7107 21.2812 35.2149C22.5624 34.7191 23.7237 33.9566 24.688 32.978C25.9686 31.6947 26.8699 30.0827 27.2925 28.3198C27.7151 26.5568 27.6426 24.7114 27.083 22.987C27.8531 22.5212 28.5554 21.9515 29.17 21.294C30.077 20.334 30.813 19.218 31.288 17.996C31.755 16.77 31.9896 15.4679 31.98 14.156C31.9813 12.8548 31.7098 11.5678 31.183 10.378M22.636 11.089C22.567 10.7755 22.5345 10.455 22.539 10.134C22.896 10.196 23.235 10.302 23.574 10.444C24.05 10.644 24.464 10.969 24.785 11.342C25.093 11.729 25.366 12.147 25.52 12.627C25.688 13.107 25.736 13.587 25.736 14.067C25.6826 14.9786 25.2991 15.8396 24.657 16.489L22.637 11.094L22.636 11.089ZM24.944 17.254C25.005 17.196 25.067 17.138 25.12 17.071C25.533 16.636 25.793 16.174 26.009 15.631C26.225 15.089 26.269 14.502 26.269 13.974C26.269 13.387 26.115 12.858 25.899 12.378C25.683 11.898 25.318 11.462 24.948 11.094C24.578 10.769 24.102 10.444 23.627 10.289C23.284 10.165 22.909 10.111 22.531 10.085C22.5459 9.46052 22.7039 8.84777 22.993 8.29401C23.424 8.37801 23.838 8.50701 24.239 8.69401C24.974 9.01801 25.559 9.49801 26.079 10.027C26.555 10.614 26.986 11.249 27.246 11.947C27.506 12.645 27.616 13.374 27.616 14.129C27.616 14.885 27.462 15.631 27.141 16.267C26.8773 16.936 26.4629 17.5352 25.93 18.018C25.7579 18.1737 25.5754 18.3177 25.384 18.449L24.939 17.258L24.944 17.254ZM25.661 19.169C25.9361 18.9635 26.1967 18.7393 26.441 18.498C26.978 17.911 27.453 17.165 27.713 16.422C28.034 15.618 28.144 14.814 28.144 14.022C28.144 13.232 27.946 12.427 27.621 11.685C27.3024 10.9582 26.8378 10.3047 26.256 9.76501C25.674 9.24001 25.045 8.80501 24.309 8.54201C23.8938 8.39764 23.4649 8.29643 23.029 8.24001C23.213 7.89801 23.438 7.58201 23.715 7.29801C23.931 7.08001 24.169 6.89401 24.415 6.73401C24.613 6.80401 24.807 6.88401 24.996 6.97401C25.9151 7.36491 26.7417 7.9448 27.422 8.67601C28.114 9.37401 28.633 10.285 29.003 11.182C29.373 12.142 29.527 13.147 29.527 14.107C29.485 15.0962 29.2719 16.0706 28.897 16.987C28.527 17.84 27.947 18.627 27.255 19.325C26.8997 19.6842 26.5056 20.0028 26.08 20.275L25.661 19.16V19.169ZM15.354 33.516C15.1987 33.4571 15.0459 33.3917 14.896 33.32C13.9769 32.9291 13.1503 32.3492 12.47 31.618C11.778 30.92 11.259 30.009 10.889 29.107C10.5378 28.1721 10.3615 27.1806 10.369 26.182C10.4089 25.1925 10.6221 24.2178 10.999 23.302C11.369 22.449 11.95 21.662 12.642 20.965C12.9698 20.6321 13.331 20.3338 13.72 20.075L14.147 21.195C13.9035 21.3811 13.6726 21.5832 13.456 21.8C12.919 22.387 12.443 23.134 12.184 23.876C11.862 24.68 11.752 25.485 11.752 26.276C11.752 27.066 11.95 27.871 12.276 28.614C12.5946 29.3408 13.0592 29.9943 13.641 30.534C14.222 31.058 14.851 31.494 15.591 31.756C15.966 31.889 16.358 31.982 16.75 32.04C16.5689 32.3687 16.3435 32.6708 16.08 32.938C15.863 33.1571 15.6206 33.3495 15.358 33.511M15.653 31.596C14.918 31.271 14.333 30.791 13.813 30.262C13.337 29.676 12.91 29.04 12.646 28.342C12.3927 27.6428 12.2673 26.9037 12.276 26.16C12.276 25.405 12.43 24.658 12.752 24.022C13.012 23.342 13.442 22.752 13.962 22.272C14.108 22.138 14.262 22.018 14.42 21.902L14.878 23.112C14.843 23.147 14.808 23.178 14.773 23.218C14.359 23.649 14.099 24.116 13.883 24.658C13.667 25.2 13.623 25.787 13.623 26.316C13.623 26.906 13.777 27.431 13.993 27.911C14.209 28.391 14.574 28.827 14.944 29.196C15.314 29.52 15.79 29.845 16.265 30C16.582 30.111 16.921 30.17 17.269 30.196C17.2411 30.8178 17.074 31.4254 16.78 31.974C16.3914 31.8903 16.0134 31.7635 15.653 31.596ZM17.19 29.182C17.256 29.502 17.278 29.822 17.269 30.138C16.9458 30.0728 16.6302 29.9746 16.327 29.845C15.851 29.645 15.437 29.32 15.116 28.947C14.808 28.56 14.535 28.142 14.381 27.662C14.213 27.182 14.165 26.702 14.165 26.222C14.2165 25.3462 14.5731 24.5162 15.173 23.876L17.19 29.182ZM11.11 32.929C10.202 32.014 9.577 30.96 9.101 29.787C8.688 28.671 8.471 27.387 8.471 26.165C8.533 24.942 8.793 23.72 9.269 22.605C9.744 21.475 10.479 20.467 11.325 19.618C11.8394 19.1037 12.4162 18.6559 13.042 18.285L13.368 19.138C12.87 19.467 12.408 19.836 12.003 20.285C11.2648 21.066 10.6914 21.9877 10.317 22.995C9.947 24 9.797 25.071 9.797 26.138C9.859 27.191 10.057 28.258 10.488 29.218C10.9165 30.178 11.5267 31.0459 12.285 31.774C13.0305 32.4851 13.9048 33.0475 14.861 33.431C14.997 33.485 15.134 33.529 15.271 33.578C14.6453 33.9487 13.9359 34.1551 13.209 34.178C12.95 34.1828 12.6914 34.156 12.439 34.098C11.9624 33.7532 11.5188 33.3648 11.114 32.938M30.637 17.694C30.161 18.822 29.426 19.831 28.58 20.68C28.0376 21.2245 27.4248 21.694 26.758 22.076L26.441 21.226C26.9808 20.8882 27.4737 20.4807 27.907 20.014C28.642 19.222 29.227 18.311 29.593 17.302C29.963 16.298 30.113 15.227 30.113 14.16C30.051 13.107 29.853 12.04 29.421 11.08C28.567 9.16053 26.9988 7.64931 25.049 6.86701C24.8702 6.79708 24.688 6.73633 24.503 6.68501C25.3941 6.15001 26.4567 5.97815 27.471 6.20501C27.951 6.55101 28.395 6.94201 28.791 7.36501C29.699 8.28001 30.324 9.32901 30.799 10.507C31.213 11.622 31.429 12.907 31.429 14.129C31.368 15.351 31.108 16.578 30.632 17.689"
                    fill="white"
                />
            </svg>
        ),
    },
];

export function MarketSwapTabs() {
   
    return (
        <Tabs defaultValue="market" className="w-[400px]">
            <TabsList className="bg-transparent">
                <TabsTrigger value="market" asChild>
                    <Button size={"sm"} variant={"link"}>
                        Market
                    </Button>
                </TabsTrigger>
            </TabsList>
            <Separator className="w-[300px]" />
            <TabsContent value="market"> 
                <SwapCard /> 
            </TabsContent>
        </Tabs>
    );
}


export function SwapCard() {
 const [sellCurrency, setSellCurrency] = useState<Currency>(currencies[1]);
    const [buyCurrency, setBuyCurrency] = useState<Currency>(currencies[0]);
    const [sellValue, setSellValue] = useState<string>("");
    const [buyValue, setBuyValue] = useState<string>("");
    const { data: supraPrice } = usePrice();
    const buyCurrencies = useMemo(
        () => currencies.filter((currency) => currency.id !== sellCurrency.id),
        [sellCurrency]
    );
    const sellCurrencies = useMemo(
        () => currencies.filter((currency) => currency.id !== buyCurrency.id),
        [buyCurrency]
    );

   return <Card className="w-full">
                <CurrencyInput
                    title="Sell"
                    currencies={sellCurrencies}
                    onClick={setSellCurrency}
                    className="mt-5"
                    price={supraPrice ?? "0"}
                    value={sellValue}
                    setValue={(val) => {
                        setSellValue(val);
                        if (val) {
                            setBuyValue(
                                Big(val)
                                    .mul(supraPrice ?? "0")
                                    .toFixed(2)
                            );
                        } else {
                            setBuyValue("");
                        }
                    }}
                />
                <CurrencyInput
                    title="Buy"
                    currencies={buyCurrencies}
                    isDisabled={true}
                    onClick={setBuyCurrency}
                    className="mt-5"
                    price={supraPrice ?? "0"}
                    value={buyValue}
                    setValue={setBuyValue}
                />
                <CardFooter>

                <SwapButton />
                </CardFooter>
                </Card> 
}
